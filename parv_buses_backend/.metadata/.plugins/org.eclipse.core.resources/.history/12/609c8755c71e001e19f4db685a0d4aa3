package com.app.service;

import java.io.File;
import java.io.IOException;

import javax.annotation.PostConstruct;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.app.custom_exceptions.ResourceNotFoundException;
import com.app.dao.EmployeeDao;
import com.app.dto.ApiResponse;
import com.app.entities.Employee;

@Service
@Transactional
public class ImageHandlingServiceImpl implements ImageHandlingService {
	// dep :emp dao i/f
	@Autowired
	private EmployeeDao empDao;

	// to inject the value of a property : "upload.location" , from app property
	// file
	// Field level DI , for injecting the value : using SpEL (spring expression
	// language)
	@Value("${upload.location}")
	private String folderLocation;

	@PostConstruct
	public void init() {
		System.out.println("in init " + folderLocation);
		// chk if folder exists
		File folder = new File(folderLocation);
		if (folder.exists())
			System.out.println("folder alrdy exists !");
		else {
			folder.mkdir(); // creates a new folder
			System.out.println("created a new folder...");
		}

	}

	@Override
	public ApiResponse uploadImage(Long empId, MultipartFile file) throws IOException {
		// chk if emp exists by id
		Employee emp = empDao.findById(empId).orElseThrow(() -> new ResourceNotFoundException("Invalid emp id !!!!!"));
		// emp : persistent
		// save uploaded file contents in server side folder.
		// create the path to store the file
		String path = folderLocation.concat(file.getOriginalFilename());
		System.out.println("path " + path);
		// FileUtils class : to read byte[] from multpart file ---> server side folder
		// API : public void writeByteArrayToFile(File file, byte[] data) throws
		// IOException
		FileUtils.writeByteArrayToFile(new File(path), file.getBytes());
		// file saved successfully !
		// set image path in db
		emp.setImagePath(path);
		// In case of storing the uploaded file contents in DB :
		// emp.setImage(file.getBytes());
		return new ApiResponse("File uploaded n stored in server side folder");
	}// update

	@Override
	public byte[] downloadImage(Long empId) throws IOException {
		// get emp from DB
		Employee emp = empDao.
				findById(empId).orElseThrow(() -> new ResourceNotFoundException("Invalid emp id !!!!!"));
		
		// => emp exists !
		// chk if image path exists
		if (emp.getImagePath() != null) {
			// img exists , read file contents in to byte[]
			return FileUtils.readFileToByteArray(new File(emp.getImagePath()));
		}
		throw new ResourceNotFoundException("Image not yet assigned!!!!");
	}

}
